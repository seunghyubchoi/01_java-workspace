package com.kh.chap04_field.model.vo;

/*
 * 변수 구분
 * - 전역 변수 : 클래스 영역에 바로 선언한 변수, 클래스 내에서면 어디서든 전역으로 다 사용 가능
 * 			   (외우는 팁! 전역 = 전체지역)
 * - 지역 변수 : 클래스 영역내에 어떤 특정한 구역 ({})에 선언한 변수, 선언된 해당 그 지역에서만 사용 가능
 * 					* 특정한 구역 : 메소드 {}, 제어문(if, for) {} 등등..
 * 
 * 
 * 1. 전역 변수 
 * - 필드에 선언 = 멤버 변수, 인스턴스 변수라고도 부름
 * - 생성 시점 : new 라는 연산자를 통해서 객체 생성시 
 * - 소멸 시점 : 객체 소멸시 같이 소멸
 * 
 * - 클래스 변수 == static 변수 => 예약어 쓸 수 있는데 static이라는 걸 쓰면 클래스 변수가 된다
 * - 생성 시점 : 프로그램 실행 (해당 객체 생성이 안 돼도)과 동시에 무조건 메모리 영역에 할당 => static 영역에
 * - 소멸 시점 : 프로그램 종료될 때 소멸 
 * 
 * 2. 지역 변수
 * - 생성 시점 : 지역 변수가 속해 있는 특정한 구역({}) 실행(호출)시 메모리 영역에 할당
 * - 소멸 시점 : 특정한 구역({}) 종료 시 소멸
 * 
 * 
 *
 */
// 변수 선언 위치에 따른 구분을 보기 위한 클래스
public class FieldTest1 { // 클래스 영역 시작
	
	// 멤버 변수(= 인스턴스 변수) - 전역 변수
	private int global;
	
	public void test1(int num) { // test 메소드 영역 시작
		// 매개변수(지역변수 즉, 메소드 영역 내에서만 사용 가능)
		int local = 10; // = 지역변수
		
		
		// 멤버변수 출력 => 멤버변수는 해당 이 객체 생성시 JVM이 기본 값으로라도 초기화
		System.out.println(global); // 초기화 안 돼 있음. 근데 오류가 안남 
		// => heap 영역에 생성될 때 초기화가 됨
		
		
		// 매개변수 => 매개변수는 해당 이 메소드 호출시 반드시 값이 한 번은 전달 될 것이기 때문에
		// 초기화 안 돼 있어도 됨
		System.out.println(num); // 초기화 안 돼 있음. 근데 오류가 안남
		// 
		
		
		System.out.println(local); // 초기화 안 돼 있음. 그리고 오류가 남
		
		
	} // test 메소드 영역 끝
	
	
} // 클래스 영역 끝
